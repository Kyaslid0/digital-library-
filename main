import time
from tkinter import *
from tkinter import ttk

import openpyxl


class Book:
    count_of_all_books = 0

    def __init__(self, name, author, year, count, taken):
        self.name = name
        self.author = author
        self.year = year
        self.count = count
        self.book_taken = taken
        self.count_of_all_books += count - taken

    def viewing_book(self):
        print(f'Название: {self.name}')
        print(f'Автор: {self.author}')
        print(f'Год: {self.year}')
        print(f'Кол-во: {self.count}')
        print()

    def return_book(self, count):
        Book.count_of_all_books += count
        if self.take_book == 0:
            error = 1
        else:
            self.taken -= count
            error = 0

    def take_book(self, count):
        Book.count_of_all_books -= count
        if self.count < self.take_book + count:
            error = 1
        else:
            self.take_book += count
            error = 0


def data_import(file):
    global BOOKS, name_xl_file, xl_file, xl
    name_xl_file = file
    xl_file = openpyxl.load_workbook(file)
    xl = xl_file['books']

    data = []

    latters = 'ABCDEF'
    j = 0
    while True:
        j += 1
        row = []
        for i in latters:
            row.append(xl[i + str(j)].value)
        if str(row[0]) == 'None':
            break
        data.append(row)

    BOOKS = []
    for i in range(len(data)):
        BOOKS.append(Book(data[i][1], data[i][2], data[i][3], data[i][4], data[i][5]))
    xl_file.close()


root = Tk()
root.title('Picture')
root.geometry('1000x600')

Width = 1000
High = 600
N = 80
c = Canvas(root, width=Width, height=High, bg='#ffffff')
c.pack()
Half_Width = Width // 2


def Dell_main_slide():
    global shotdown
    shotdown = 1
    c.delete('all')

    elements = [Entry_1, but, Name, Programm_exit]
    for i in range(len(elements)):
        elements[i].destroy()


def main_slide():
    global shotdown, Name, but, Entry_1, Programm_exit
    shotdown = 0

    def moving_balls():
        for i in range(100, 900, 200):
            red_ball = c.create_oval(i, 70, i + 60, 130, fill='white', tags='white_ball')
        for i in range(200, 900, 200):
            black_ball = c.create_oval(i, 100, i + 60, 160, fill='black', tags='black_ball')

        def white_ball_moution():
            def moving_wh_up():
                c.move('white_ball', 0, -1)
                if shotdown == 0:
                    if c.coords(red_ball)[1] > 70:
                        root.after(20, moving_wh_up)

            def moving_wh_down():
                c.move('white_ball', 0, 1)
                if shotdown == 0:
                    if c.coords(red_ball)[1] < 100:
                        root.after(20, moving_wh_down)

            if shotdown == 0:
                if c.coords(red_ball)[1] == 70:
                    moving_wh_down()
                if c.coords(red_ball)[1] == 100:
                    moving_wh_up()
                root.after(20, white_ball_moution)

        def black_balls_moution():
            def moving_bl_up():
                c.move('black_ball', 0, -1)
                if shotdown == 0:
                    if c.coords(black_ball)[1] > 70:
                        root.after(20, moving_bl_up)

            def moving_bl_down():
                c.move('black_ball', 0, 1)
                if shotdown == 0:
                    if c.coords(black_ball)[1] < 100:
                        root.after(20, moving_bl_down)

            if shotdown == 0:
                if c.coords(black_ball)[1] == 70:
                    moving_bl_down()
                if c.coords(black_ball)[1] == 100:
                    moving_bl_up()
                root.after(20, black_balls_moution)

        white_ball_moution()
        black_balls_moution()

    moving_balls()

    c.create_text(Half_Width, 18, font='Arial 24', text='Электронная библиотека "Deep Dark Fantasies"')
    for i in range(3):
        c.create_rectangle(Half_Width - 40 - i * 7, 200 + i * 7, Half_Width + 60 - i * 7, 370 + i * 7, fill='#ffffff')

    c.create_text(Half_Width - 4, 250, font='Arial 8', text='Жак Фреско')

    for i in range(2):
        c.create_line(Half_Width - 40, 255 + i * 8, Half_Width + 30, 255 + i * 8)

    for j in range(2):
        old_i = Half_Width - 44
        up = 310 + j * 20
        down = 320 + j * 20
        count = down
        for i in range(Half_Width - 40, Half_Width + 44, 4):
            if count == down:
                c.create_line(old_i, down, i, up)
                count = up
            else:
                c.create_line(old_i, up, i, down)
                count = down
            old_i = i

    def full_exit():
        exit(1)

    Entry_1 = Entry(c, width=15, font='Arial 16', bg='#eeeeee')
    Entry_1.place(x=Half_Width - 40, y=High - 100)

    Programm_exit = Button(c, text='Выйти из программы', font='Arial 12', command=full_exit)
    Programm_exit.place(x=Width - 240, y=High - 100)

    Name = Label(c, text='Введите имя пользователя >>', font='Arial 12', bg='#ffffff')
    Name.place(x=Half_Width - 280, y=High - 100)

    but = Button(c, text='ОК', command=slide_1_to_2)
    but.place(x=Half_Width + 140, y=High - 100)


def User_Name_what():
    global UserName
    UserName = str(Entry_1.get())
    if UserName == '':
        UserName = 'Ноунейм'
    # return(UserName)


def slide_1_to_2():
    User_Name_what()
    menu_slide()


def menu_slide():
    global Who_User, Back_to_main, Buttons, Who_User

    Dell_main_slide()
    logo = c.create_text(Half_Width, 20, font='Arial 24', text='Личный кабинет')

    Who_User = Label(c, text=f'>>Пользователь: {UserName}', font='Arial 18', bg='#ffffff')
    Back_to_main = Button(c, width=10, heigh=2, text='Выйти из ЛК', command=slide_2_to_1)

    List_of_books = Button(c, width=30, heigh=3, text='Вывести список книг', command=List_of_books_function)  # 1
    Add_book_in_base = Button(c, width=30, heigh=3, text='Добавить книгу в базу данных',
                              command=Add_book_in_base_slide)  # 2
    Take_book = Button(c, width=30, heigh=3, text='Взять книгу(и)', command=Take_book_function)  # 3
    Return_book = Button(c, width=30, heigh=3, text='Вернуть книгу(и)', command=Return_book_function)  # 4
    help_books = Button(c, width=30, heigh=3, text='Справка', command=help_books_function)  # 5

    Buttons = [List_of_books, Add_book_in_base, Take_book, Return_book, help_books]

    Who_User.place(x=140, y=50)
    Back_to_main.place(x=Width - 240, y=50)
    for i in range(len(Buttons)):
        Buttons[i].place(x=Half_Width - 100, y=100 + i * 80)


def delete_menu_slide():
    c.delete('all')
    elements = [Who_User, Back_to_main]
    for i in range(len(Buttons)):
        elements.append(Buttons[i])
    for i in range(len(elements)):
        elements[i].destroy()


def List_of_books_function():
    global button_num
    button_num = 1
    delete_menu_slide()
    columns = ('num', 'name', 'author', 'year', 'count')
    tree = ttk.Treeview(c, columns=columns, show='headings')
    tree.heading('num', text='Номер')
    tree.heading('name', text='Название')
    tree.heading('author', text='Автор')
    tree.heading('year', text='Год издания')
    tree.heading('count', text='Количество')
    i = 0
    for book in BOOKS:
        i += 1
        tree.insert('', END, values=(i, book.name, book.author, book.year, book.count_of_all_books - book.book_taken))
    tree.place(x=0, y=100)
    scrollbar = ttk.Scrollbar(c, orient=VERTICAL, command=tree.yview)
    tree.configure(yscroll=scrollbar.set, height=23)
    scrollbar.place(anchor='e', x=Width)

    def destroy_slide():
        tree.destroy()
        exit_button.destroy()
        c.delete('all')
        menu_slide()

    c.create_text(Half_Width, 30, text='База Данных книг', font='Arial 30')
    exit_button = Button(c, width=12, height=2, text='Назад', font='Arial 12', command=destroy_slide)
    exit_button.place(x=Width - 200, y=20)


def Add_book_in_base_slide():
    global button_num, count_list_books
    button_num = 2
    temps = []
    delete_menu_slide()
    count_list_books = 0

    def add_book_in_xl():
        global count_list_books
        book_info = (Name_book_entry.get(), Author_book_entry.get(), Year_book_entry.get(), str(Count_book_entry.get()))
        xl_file = openpyxl.load_workbook(name_xl_file)
        xl = xl_file['books']
        count_rows = len(xl['A'])

        row = (count_rows + 1, book_info[0], book_info[1], int(book_info[2]), int(book_info[3]), 0)
        xl.append(row)
        xl_file.save(name_xl_file)

        Name_book_entry.delete(0, 'end')
        Author_book_entry.delete(0, 'end')
        Year_book_entry.delete(0, 'end')
        Count_book_entry.delete(0, 'end')
        xl_file.close()

        name_book_label = Label(c, text=row[1], font='Arial 16', bg='#ffffff')
        name_book_label.place(x=35, y=200 + count_list_books * 30)
        author_book_label = Label(c, text=row[2], font='Arial 16', bg='#ffffff')
        author_book_label.place(x=320, y=200 + count_list_books * 30)
        year_book_label = Label(c, text=row[3], font='Arial 16', bg='#ffffff')
        year_book_label.place(x=560, y=200 + count_list_books * 30)
        count_book_label = Label(c, text=row[4], font='Arial 16', bg='#ffffff')
        count_book_label.place(x=560, y=200 + count_list_books * 30)
        temps.append([name_book_label, author_book_label, year_book_label, count_book_label])

        count_list_books += 1

    def destroy_slide():
        c.delete('all')
        for temp in temps:
            for i in temp:
                i.destroy()
        menu_slide()

    adding = c.create_text(Half_Width, 40, font='Arial 30', text='Добавление книги')

    Name_book_entry = Entry(c, width=30, font='Arial 12', bg='#eeeeee')
    Name_book = Label(c, text='Название', font='Arial 16', bg='#ffffff')
    Name_book_entry.place(x=35, y=150)
    Name_book.place(x=130, y=120)

    Author_book_entry = Entry(c, width=25, font='Arial 12', bg='#eeeeee')
    Author_book = Label(c, text='Автор', font='Arial 16', bg='#ffffff')
    Author_book_entry.place(x=320, y=150)
    Author_book.place(x=400, y=120)

    Year_book_entry = Entry(c, width=14, font='Arial 12', bg='#eeeeee')
    Year_book = Label(c, text='Год издания', font='Arial 16', bg='#ffffff')
    Year_book_entry.place(x=560, y=150)
    Year_book.place(x=560, y=120)

    Count_book_entry = Entry(c, width=14, font='Arial 12', bg='#eeeeee')
    Count_book = Label(c, text='Кол-во', font='Arial 16', bg='#ffffff')
    Count_book_entry.place(x=700, y=150)
    Count_book.place(x=725, y=120)

    Name_book_entry.delete(0, 'end')
    Author_book_entry.delete(0, 'end')
    Year_book_entry.delete(0, 'end')
    Count_book_entry.delete(0, 'end')

    Add_button = Button(c, width=12, height=2, text='Добавить', font='Arial 12', command=add_book_in_xl)
    Add_button.place(x=850, y=130)

    exit_button = Button(c, width=12, height=2, text='Назад', font='Arial 12', command=destroy_slide)
    exit_button.place(x=Width - 200, y=20)

    temps.append([Name_book, Name_book_entry,
                  Author_book, Author_book_entry,
                  Year_book, Year_book_entry,
                  Count_book, Count_book_entry,
                  Add_button, exit_button])


def Take_book_function():
    global button_num
    button_num = 3
    delete_menu_slide()

    def destroy_slide():
        c.delete('all')
        exit_button.destroy()
        tree.destroy()
        scrollbar.destroy()
        for tp in temp:
            tp.destroy()
        menu_slide()

    c.create_text(Half_Width, 30, text='Взятие книги', font='Arial 30')
    exit_button = Button(c, width=12, height=2, text='Назад', font='Arial 12', command=destroy_slide)
    exit_button.place(x=Width - 200, y=20)
    def update():
        destroy_slide()
        Take_book_function()

    columns = ('num', 'name', 'count')
    tree = ttk.Treeview(c, columns=columns, show='headings')
    tree.heading('num', text='Номер')
    tree.heading('name', text='Название')
    tree.heading('count', text='Кол-во')
    i = 0
    for book in BOOKS:
        i += 1
        if book.count_of_all_books != 0:
            tree.insert('', END, values=(i, book.name, book.count_of_all_books))
    tree.place(x=0, y=100)
    scrollbar = ttk.Scrollbar(c, orient=VERTICAL, command=tree.yview)
    tree.configure(yscroll=scrollbar.set, height=23)
    scrollbar.place(anchor='e', x=Width)

    label_take_1 = Label(c, text='Номер книги', font='Arial 12', bg='#ffffff')
    label_take_1.place(x=Half_Width + 110, y=200)
    label_take_2 = Label(c, text='Кол-во', font='Arial 12', bg='#ffffff')
    label_take_2.place(x=Half_Width + 152, y=230)

    entry_take_poz = Entry(c, width=10, font='Arial 12', bg='#eeeeee')
    entry_take_poz.place(x=Half_Width + 210, y=200)
    entry_take_count = Entry(c, width=10, font='Arial 12', bg='#eeeeee')
    entry_take_count.place(x=Half_Width + 210, y=230)



    def do_taking():
        poz = int(entry_take_poz.get())
        count = int(entry_take_count.get())

        ERROR = lambda: c.create_text(Half_Width+260, 350, text = 'НЕКОРРЕКТНЫЕ ДАННЫЕ', font = 'Arial 16')
        if poz > len(BOOKS) or poz <= 0:
            ERROR()
            entry_take_count.delete(0,END)
            entry_take_poz.delete(0,END)
        elif count > BOOKS[poz - 1].count - BOOKS[poz - 1].book_taken or BOOKS[poz - 1].count == 0:
            ERROR()
            entry_take_count.delete(0,END)
            entry_take_poz.delete(0,END)

        else:
            BOOKS[poz - 1].book_taken += count
            BOOKS[poz - 1].count_of_all_books -= count
            xl['F' + str(poz)] = BOOKS[poz-1].book_taken
            #print(BOOKS[poz-1].book_taken)
            xl_file.save(name_xl_file)
            update()

    take_button = Button(c, width=12, height=2, text='Взять', font='Arial 12', command=do_taking)
    take_button.place(x=Width - 160, y=200)
    temp = [label_take_1, label_take_2, entry_take_count, entry_take_poz, take_button]
    tree.mainloop()


def Return_book_function():
    global button_num
    button_num = 4
    delete_menu_slide()
    def destroy_slide():
        c.delete('all')
        exit_button.destroy()
        tree.destroy()
        scrollbar.destroy()
        for tp in temp:
            tp.destroy()
        menu_slide()

    def update():
        destroy_slide()
        Return_book_function()

    c.create_text(Half_Width, 30, text='Возврат книги', font='Arial 30')
    exit_button = Button(c, width=12, height=2, text='Назад', font='Arial 12', command=destroy_slide)
    exit_button.place(x=Width - 200, y=20)

    columns = ('num', 'name', 'taken')
    tree = ttk.Treeview(c, columns=columns, show='headings')
    tree.heading('num', text='Номер')
    tree.heading('name', text='Название')
    tree.heading('taken', text='Взято')
    i = 0
    for book in BOOKS:
        i += 1
        if book.book_taken != 0:
            tree.insert('', END, values=(i, book.name, book.book_taken))

    tree.place(x=0, y=100)
    scrollbar = ttk.Scrollbar(c, orient=VERTICAL, command=tree.yview)
    tree.configure(yscroll=scrollbar.set, height=23)
    scrollbar.place(anchor='e', x=Width)

    label_return_1 = Label(c, text='Номер книги', font='Arial 12', bg='#ffffff')
    label_return_1.place(x=Half_Width + 110, y=200)
    label_return_2 = Label(c, text='Кол-во', font='Arial 12', bg='#ffffff')
    label_return_2.place(x=Half_Width + 152, y=230)

    entry_return_poz = Entry(c, width=10, font='Arial 12', bg='#eeeeee')
    entry_return_poz.place(x=Half_Width + 210, y=200)
    entry_return_count = Entry(c, width=10, font='Arial 12', bg='#eeeeee')
    entry_return_count.place(x=Half_Width + 210, y=230)

    def do_return():
        poz = int(entry_return_poz.get())
        count = int(entry_return_count.get())

        ERROR = lambda: c.create_text(Half_Width + 260, 350, text='НЕКОРРЕКТНЫЕ ДАННЫЕ', font='Arial 16')

        if poz > len(BOOKS) or poz <= 0:
            ERROR()
            entry_return_poz.delete(0, END)
            entry_return_count.delete(0, END)
        elif count > BOOKS[poz-1].book_taken or BOOKS[poz - 1].book_taken == 0 or count <=0 :
            ERROR()
            entry_return_poz.delete(0, END)
            entry_return_count.delete(0, END)

        else:
            BOOKS[poz - 1].book_taken -= count
            BOOKS[poz - 1].count_of_all_books += count
            xl['F' + str(poz)] = BOOKS[poz - 1].book_taken - count
            print(BOOKS[poz - 1].book_taken)
            xl_file.save(name_xl_file)
            update()


    return_button = Button(c, width=12, height=2, text='Вернуть', font='Arial 12', command=do_return)
    return_button.place(x=Width - 160, y=200)
    temp = [label_return_1, label_return_2, entry_return_count, entry_return_poz, return_button]


def help_books_function():
    global help_back_button
    delete_menu_slide()
    reference = c.create_text(Half_Width, 20, font='Arial 24', text='Справка')
    text = c.create_text(Half_Width, High // 2 - 40, width=int(Half_Width * 1.5), font='Arial 20',
                         text=f'   "Deep Dark Fantasies" - это самая крупная электронная библиотека (в квартире создателя). '
                              'Содержит более {len(BOOK)-1} различных книг.'
                              'Работает с 2021 г.\n\n'
                              'Остались вопросы?\n'
                              'Звоните: +7 (995) 788-29-25')
    help_back_button = Button(c, width=10, heigh=4, text='НАЗАД', command=slide_help_to_2)
    help_back_button.place(x=Half_Width, y=High - 140)


def slide_2_to_1():
    delete_menu_slide()
    main_slide()


def slide_help_to_2():
    help_back_button.destroy()
    c.delete('all')
    menu_slide()


def back_button_f():
    global back_button

    back_button = Button(c, width=50, heigh=6, text='НАЗАД', command=slide_3_to_2)
    back_button.place(x=Half_Width - 140, y=150)


def slide_3_to_2():
    back_button.destroy()
    c.delete('all')
    menu_slide()


data_import('БД.xlsx')
main_slide()
root.mainloop()
xl_file.close()
